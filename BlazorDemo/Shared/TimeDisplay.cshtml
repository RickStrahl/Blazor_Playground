@implements IDisposable

<div class="alert alert-secondary mt-4" role="alert">
    <div>@Message</div>

    <i class="oi oi-clock"></i>&nbsp;
    <b style="font-size: 2.5em;">
        @Time.ToString(FormatString)
    </b>
</div>

@functions {
    [Parameter]
    string FormatString { get; set; } = "HH:mm:ss"; // Demonstrates how a parent component can supply parameters

    [Parameter]
    string Message { get; set; }

    DateTime Time { get; set; } = DateTime.Now;

    // Make sure timer only is created once!
    public System.Timers.Timer _timer;

    protected override Task OnInitAsync()
    {
        _timer = new System.Timers.Timer();
        _timer.Elapsed += (page, ev) =>
        {
            if (page == null)
            {
                Dispose();
                return;
            }

            Time = DateTime.Now;
            this.StateHasChanged();
            Console.WriteLine("Timer fired: " + Time);
        };
        _timer.Interval = 1000;
        _timer.Start();
        Console.WriteLine("Timer created");


        return base.OnInitAsync();
    }

    /// <summary>
    /// Important: Must dispose the timer or else the timer
    /// keeps firing in the background while the component
    /// gets released as you navigate off.
    /// </summary>
    public void Dispose()
    {
        Console.WriteLine("Timer Disposing");
        _timer?.Stop();
        _timer.Dispose();
        _timer = null;
    }

}
